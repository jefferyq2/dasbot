#!/usr/bin/env bash

myfetch() {
	local url="$1"
	local file="$2"
	local sha="$3"
	local file_sha=""
	
	if [ -z "$url" -o -z "$file" -o -z "$sha" ]; then
		echo "myfetch error"
		exit 1
	fi

	if [ -f "$file" ]; then
		case "$DISTRIBUTION" in
			redhat|centos|sunos|suse)
				file_sha=`sha1sum "$file" | awk '{ print $1 }'`
				;;
		
			*)
				echo "myfetch sha error"
				exit 1
				;;
		esac

		if [ "$file_sha" = "$sha" ]; then
			return 0
		fi
	fi

	rm -f -- "$file"
	wget -O "$file" "$url" ||
	exit 1

	case "$DISTRIBUTION" in
		redhat|centos|sunos|suse)
			file_sha=`sha1sum "$file" | awk '{ print $1 }'`
			;;
	
		*)
			echo "myfetch sha error"
			exit 1
			;;
	esac

	if [ "$file_sha" != "$sha" ]; then
		echo "sha missmatch for $file"
		exit 1
	fi
	
	return 0
}

DISTRIBUTION=`cat dist 2>/dev/null`

if [ -z "$DISTRIBUTION" ]; then
	echo "No distribution?"
	exit 1
fi

BOTAN_URL="http://botan.randombit.net/files/Botan-1.10.7.tgz"
BOTAN_FILE="Botan-1.10.7.tgz"
BOTAN_SHA="54552cdafabea710f48cd4536a938ed329ef60dd"
BOTAN_VERSION="1.10.7"

CUNIT_URL="http://downloads.sourceforge.net/project/cunit/CUnit/2.1-2/CUnit-2.1-2-src.tar.bz2"
CUNIT_FILE="CUnit-2.1-2-src.tar.bz2"
CUNIT_SHA="6c2d0627eb64c09c7140726d6bf814cf531a3ce0"
CUNIT_VERSION="2.1.2"

PROTOBUF_URL="http://protobuf.googlecode.com/files/protobuf-2.4.1.tar.gz"
PROTOBUF_FILE="protobuf-2.4.1.tar.gz"
PROTOBUF_SHA="efc84249525007b1e3105084ea27e3273f7cbfb0"
PROTOBUF_VERSION="2.4.1"

CPPUNIT_URL="http://downloads.sourceforge.net/project/cppunit/cppunit/1.12.1/cppunit-1.12.1.tar.gz"
CPPUNIT_FILE="cppunit-1.12.1.tar.gz"
CPPUNIT_SHA="f1ab8986af7a1ffa6760f4bacf5622924639bf4a"
CPPUNIT_VERSION="1.12.1"
CPPUNIT_P1_URL="https://wiki.opendnssec.org/download/attachments/2064460/finite.patch"
CPPUNIT_P1_FILE="finite.patch"
CPPUNIT_P1_SHA="cbd08636aba537c6a40fdebc1eb901fd2b56aa16"

case "$DISTRIBUTION" in
	redhat|centos)
		if ! rpm -qa | grep -q '^cppunit-[0-9]'; then
			myfetch "http://ftp.acc.umu.se/mirror/fedora/epel/5/x86_64/cppunit-1.12.0-4.el5.1.x86_64.rpm" \
				"cppunit-1.12.0-4.el5.1.x86_64.rpm" \
				"befdcf3aae517fb28379655ad33989e4c66582c2"
			sudo -nA rpm -i cppunit-1.12.0-4.el5.1.x86_64.rpm ||
			exit 1
		fi
		if ! rpm -qa | grep -q '^cppunit-devel-[0-9]'; then
			myfetch "http://ftp.acc.umu.se/mirror/fedora/epel/5/x86_64/cppunit-devel-1.12.0-4.el5.1.x86_64.rpm" \
				"cppunit-devel-1.12.0-4.el5.1.x86_64.rpm" \
				"1204807fed1c75de2f168b79ffd9dbbd756a0f21"
			sudo -nA rpm -i cppunit-devel-1.12.0-4.el5.1.x86_64.rpm ||
			exit 1
		fi
		;;

	suse)
		rm -rf src
		mkdir -p src
		
		myfetch $BOTAN_URL $BOTAN_FILE $BOTAN_SHA
		
		built=`cat built.botan 2>/dev/null`
		if [ "$built" != "$BOTAN_VERSION" ]; then
			(
				cd src &&
				gunzip -c "../$BOTAN_FILE" | tar xf - &&
				cd Botan-$BOTAN_VERSION &&
				./configure.py &&
				make &&
				sudo -nA make install
			) &&
			echo "$BOTAN_VERSION" > built.botan ||
			exit 1
		fi

		myfetch $CUNIT_URL $CUNIT_FILE $CUNIT_SHA
		
		built=`cat built.cunit 2>/dev/null`
		if [ "$built" != "$CUNIT_VERSION" ]; then
			(
				cd src &&
				bunzip2 -c "../$CUNIT_FILE" | tar xf - &&
				cd CUnit-2.1-2 &&
				./configure &&
				make &&
				sudo -nA make install
			) &&
			echo "$CUNIT_VERSION" > built.cunit ||
			exit 1
		fi

		myfetch $PROTOBUF_URL $PROTOBUF_FILE $PROTOBUF_SHA
		
		built=`cat built.protobuf 2>/dev/null`
		if [ "$built" != "$PROTOBUF_VERSION" ]; then
			(
				cd src &&
				gunzip -c "../$PROTOBUF_FILE" | tar xf - &&
				cd protobuf-$PROTOBUF_VERSION &&
				./configure &&
				make &&
				sudo -nA make install
			) &&
			echo "$PROTOBUF_VERSION" > built.protobuf ||
			exit 1
		fi
		;;

	sunos)
		platform=`uname -p`
		
		jobs=1
		case "$platform" in
			sparc)
				jobs=16
				;;
		esac

		rm -rf src
		mkdir -p src
		
		myfetch $BOTAN_URL $BOTAN_FILE $BOTAN_SHA
		
		built=`cat built.botan 2>/dev/null`
		if [ "$built" != "$BOTAN_VERSION" ]; then
			opt=""
			case "$platform" in
				i386)
					opt="--disable-asm --cpu=i686"
					;;
	
				sparc)
					opt="--cpu=sparc64"
					;;
	
				*)
					exit 1
					;;
			esac
			(
				cd src &&
				gunzip -c "../$BOTAN_FILE" | tar xf - &&
				cd Botan-$BOTAN_VERSION &&
				./configure.py $opt &&
				gmake -j $jobs &&
				sudo -nA gmake install
			) &&
			echo "$BOTAN_VERSION" > built.botan ||
			exit 1
		fi
		
		myfetch $CUNIT_URL $CUNIT_FILE $CUNIT_SHA
		
		built=`cat built.cunit 2>/dev/null`
		if [ "$built" != "$CUNIT_VERSION" ]; then
			(
				cd src &&
				bunzip2 -c "../$CUNIT_FILE" | tar xf - &&
				cd CUnit-2.1-2 &&
				./configure &&
				gmake -j $jobs &&
				sudo -nA gmake install
			) &&
			echo "$CUNIT_VERSION" > built.cunit ||
			exit 1
		fi

		myfetch $PROTOBUF_URL $PROTOBUF_FILE $PROTOBUF_SHA
		
		built=`cat built.protobuf 2>/dev/null`
		if [ "$built" != "$PROTOBUF_VERSION" ]; then
			opt=""
			case "$platform" in
				i386)
					opt="--disable-64bit-solaris"
					;;
			esac
			(
				cd src &&
				gunzip -c "../$PROTOBUF_FILE" | tar xf - &&
				cd protobuf-$PROTOBUF_VERSION &&
				./configure $opt &&
				gmake -j $jobs &&
				sudo -nA gmake install
			) &&
			echo "$PROTOBUF_VERSION" > built.protobuf ||
			exit 1
		fi

		myfetch $CPPUNIT_URL $CPPUNIT_FILE $CPPUNIT_SHA
		myfetch $CPPUNIT_P1_URL $CPPUNIT_P1_FILE $CPPUNIT_P1_SHA

		built=`cat built.cppunit 2>/dev/null`
		if [ "$built" != "$CPPUNIT_VERSION" ]; then
			(
				cd src &&
				gunzip -c "../$CPPUNIT_FILE" | tar xf - &&
				cd cppunit-$CPPUNIT_VERSION &&
				patch -p1 < "../../$CPPUNIT_P1_FILE" &&
				./configure &&
				gmake -j $jobs &&
				sudo -nA gmake install
			) &&
			echo "$CPPUNIT_VERSION" > built.cppunit ||
			exit 1
		fi

		sudo -nA crle -u -l /usr/local/lib ||
		exit 1
		;;
esac

echo "DONE"
exit 0
