#!/usr/bin/env bash

myfetch() {
	local url="$1"
	local file="$2"
	local sha="$3"
	local file_sha=""
	
	if [ -z "$url" -o -z "$file" -o -z "$sha" ]; then
		echo "myfetch error"
		exit 1
	fi

	if [ -f "$file" ]; then
		case "$DISTRIBUTION" in
			ubuntu|redhat|centos|sunos|suse)
				file_sha=`sha1sum "$file" | awk '{ print $1 }'`
				;;

			freebsd*)
				file_sha=`sha1 -q "$file"`
				;;

			*)
				echo "myfetch sha error"
				exit 1
				;;
		esac

		if [ "$file_sha" = "$sha" ]; then
			return 0
		fi
	fi

	rm -f -- "$file"
	wget -O "$file" "$url" ||
	exit 1

	case "$DISTRIBUTION" in
		ubuntu|redhat|centos|sunos|suse)
			file_sha=`sha1sum "$file" | awk '{ print $1 }'`
			;;

		freebsd*)
			file_sha=`sha1 -q "$file"`
			;;

		*)
			echo "myfetch sha error"
			exit 1
			;;
	esac

	if [ "$file_sha" != "$sha" ]; then
		echo "sha missmatch for $file"
		exit 1
	fi
	
	return 0
}

DISTRIBUTION=`cat dist 2>/dev/null`

if [ -z "$DISTRIBUTION" ]; then
	echo "No distribution?"
	exit 1
fi

rm -rf src
mkdir -p src

BOTAN_URL="http://botan.randombit.net/files/Botan-1.10.7.tgz"
BOTAN_FILE="Botan-1.10.7.tgz"
BOTAN_SHA="54552cdafabea710f48cd4536a938ed329ef60dd"
BOTAN_VERSION="1.10.7"

CUNIT_URL="http://downloads.sourceforge.net/project/cunit/CUnit/2.1-2/CUnit-2.1-2-src.tar.bz2"
CUNIT_FILE="CUnit-2.1-2-src.tar.bz2"
CUNIT_SHA="6c2d0627eb64c09c7140726d6bf814cf531a3ce0"
CUNIT_VERSION="2.1.2"

PROTOBUF_URL="http://protobuf.googlecode.com/files/protobuf-2.4.1.tar.gz"
PROTOBUF_FILE="protobuf-2.4.1.tar.gz"
PROTOBUF_SHA="efc84249525007b1e3105084ea27e3273f7cbfb0"
PROTOBUF_VERSION="2.4.1"

CPPUNIT_URL="http://downloads.sourceforge.net/project/cppunit/cppunit/1.12.1/cppunit-1.12.1.tar.gz"
CPPUNIT_FILE="cppunit-1.12.1.tar.gz"
CPPUNIT_SHA="f1ab8986af7a1ffa6760f4bacf5622924639bf4a"
CPPUNIT_VERSION="1.12.1"
CPPUNIT_P1_URL="https://wiki.opendnssec.org/download/attachments/2064460/finite.patch"
CPPUNIT_P1_FILE="finite.patch"
CPPUNIT_P1_SHA="cbd08636aba537c6a40fdebc1eb901fd2b56aa16"

JUDY_URL="http://sourceforge.net/projects/judy/files/judy/Judy-1.0.5/Judy-1.0.5.tar.gz/download"
JUDY_FILE="Judy-1.0.5.tar.gz"
JUDY_SHA="3540f003509acac3b1260424380ddf97914f7745"
JUDY_VERSION="1.0.5"

VALIDNS_URL="http://www.validns.net/download/validns-0.7.tar.gz"
VALIDNS_FILE="validns-0.7.tar.gz"
VALIDNS_SHA="44ec8b8c561384c31134b8c7893a59c710069645"
VALIDNS_VERSION="0.7"

SQLITE3_URL="http://www.sqlite.org/2014/sqlite-autoconf-3080300.tar.gz"
SQLITE3_FILE="sqlite-autoconf-3080300.tar.gz"
SQLITE3_SHA="c2a21d71d0c7dc3af71cf90f04dfd22ecfb280c2"
SQLITE3_VERSION="3.8.3"

SUBVERSION_URL="http://apache.mirrors.lucidnetworks.net/subversion/subversion-1.8.8.tar.gz"
SUBVERSION_FILE="subversion-1.8.8.tar.gz"
SUBVERSION_SHA="0317474e42ba9fdd122030e40b862617ae97a5d0"
SUBVERSION_VERSION="1.8.8"

LDNS_URL="http://nlnetlabs.nl/downloads/ldns/ldns-1.6.17.tar.gz"
LDNS_FILE="ldns-1.6.17.tar.gz"
LDNS_SHA="4218897b3c002aadfc7280b3f40cda829e05c9a4"
LDNS_VERSION="1.6.17"

CCACHE_URL="http://samba.org/ftp/ccache/ccache-3.1.9.tar.gz"
CCACHE_FILE="ccache-3.1.9.tar.gz"
CCACHE_SHA="103c14171ba6eefc9e044097480b0951f02dc7fe"
CCACHE_VERSION="3.1.9"

#
# missing dependencies
#

case "$DISTRIBUTION" in
	redhat|centos)
		if ! rpm -qa | grep -q '^cppunit-[0-9]'; then
			myfetch "http://ftp.acc.umu.se/mirror/fedora/epel/5/x86_64/cppunit-1.12.0-4.el5.1.x86_64.rpm" \
				"cppunit-1.12.0-4.el5.1.x86_64.rpm" \
				"befdcf3aae517fb28379655ad33989e4c66582c2"
			sudo -nA rpm -i cppunit-1.12.0-4.el5.1.x86_64.rpm ||
			exit 1
		fi
		if ! rpm -qa | grep -q '^cppunit-devel-[0-9]'; then
			myfetch "http://ftp.acc.umu.se/mirror/fedora/epel/5/x86_64/cppunit-devel-1.12.0-4.el5.1.x86_64.rpm" \
				"cppunit-devel-1.12.0-4.el5.1.x86_64.rpm" \
				"1204807fed1c75de2f168b79ffd9dbbd756a0f21"
			sudo -nA rpm -i cppunit-devel-1.12.0-4.el5.1.x86_64.rpm ||
			exit 1
		fi
		;;

	suse)
		myfetch $BOTAN_URL $BOTAN_FILE $BOTAN_SHA
		built=`cat built.botan 2>/dev/null`
		if [ "$built" != "$BOTAN_VERSION" ]; then
			(
				cd src &&
				gunzip -c "../$BOTAN_FILE" | tar xf - &&
				cd Botan-$BOTAN_VERSION &&
				./configure.py &&
				make &&
				sudo -nA make install
			) &&
			echo "$BOTAN_VERSION" > built.botan ||
			exit 1
		fi

		myfetch $CUNIT_URL $CUNIT_FILE $CUNIT_SHA
		built=`cat built.cunit 2>/dev/null`
		if [ "$built" != "$CUNIT_VERSION" ]; then
			(
				cd src &&
				bunzip2 -c "../$CUNIT_FILE" | tar xf - &&
				cd CUnit-2.1-2 &&
				./configure &&
				make &&
				sudo -nA make install
			) &&
			echo "$CUNIT_VERSION" > built.cunit ||
			exit 1
		fi

		myfetch $PROTOBUF_URL $PROTOBUF_FILE $PROTOBUF_SHA
		built=`cat built.protobuf 2>/dev/null`
		if [ "$built" != "$PROTOBUF_VERSION" ]; then
			(
				cd src &&
				gunzip -c "../$PROTOBUF_FILE" | tar xf - &&
				cd protobuf-$PROTOBUF_VERSION &&
				./configure &&
				make &&
				sudo -nA make install
			) &&
			echo "$PROTOBUF_VERSION" > built.protobuf ||
			exit 1
		fi

		myfetch $JUDY_URL $JUDY_FILE $JUDY_SHA
		built=`cat built.judy 2>/dev/null`
		if [ "$built" != "$JUDY_VERSION" ]; then
			(
				cd src &&
				gunzip -c "../$JUDY_FILE" | tar xf - &&
				cd judy-$JUDY_VERSION &&
				./configure &&
				make &&
				sudo -nA make install
			) &&
			echo "$JUDY_VERSION" > built.judy ||
			exit 1
		fi
		;;

	sunos)
		platform=`uname -p`
		
		jobs=1
		case "$platform" in
			sparc)
				jobs=16
				;;
		esac
		
		myfetch $BOTAN_URL $BOTAN_FILE $BOTAN_SHA
		built=`cat built.botan 2>/dev/null`
		if [ "$built" != "$BOTAN_VERSION" ]; then
			opt=""
			case "$platform" in
				i386)
					opt="--disable-asm --cpu=i686"
					;;
	
				sparc)
					opt="--cpu=sparc64"
					;;
	
				*)
					exit 1
					;;
			esac
			(
				cd src &&
				gunzip -c "../$BOTAN_FILE" | tar xf - &&
				cd Botan-$BOTAN_VERSION &&
				./configure.py $opt &&
				gmake -j $jobs &&
				sudo -nA gmake install
			) &&
			echo "$BOTAN_VERSION" > built.botan ||
			exit 1
		fi
		
		myfetch $CUNIT_URL $CUNIT_FILE $CUNIT_SHA
		built=`cat built.cunit 2>/dev/null`
		if [ "$built" != "$CUNIT_VERSION" ]; then
			(
				cd src &&
				bunzip2 -c "../$CUNIT_FILE" | tar xf - &&
				cd CUnit-2.1-2 &&
				./configure &&
				gmake -j $jobs &&
				sudo -nA gmake install
			) &&
			echo "$CUNIT_VERSION" > built.cunit ||
			exit 1
		fi

		myfetch $PROTOBUF_URL $PROTOBUF_FILE $PROTOBUF_SHA
		built=`cat built.protobuf 2>/dev/null`
		if [ "$built" != "$PROTOBUF_VERSION" ]; then
			opt=""
			case "$platform" in
				i386)
					opt="--disable-64bit-solaris"
					;;
			esac
			(
				cd src &&
				gunzip -c "../$PROTOBUF_FILE" | tar xf - &&
				cd protobuf-$PROTOBUF_VERSION &&
				./configure $opt &&
				gmake -j $jobs &&
				sudo -nA gmake install
			) &&
			echo "$PROTOBUF_VERSION" > built.protobuf ||
			exit 1
		fi

		myfetch $CPPUNIT_URL $CPPUNIT_FILE $CPPUNIT_SHA
		myfetch $CPPUNIT_P1_URL $CPPUNIT_P1_FILE $CPPUNIT_P1_SHA
		built=`cat built.cppunit 2>/dev/null`
		if [ "$built" != "$CPPUNIT_VERSION" ]; then
			(
				cd src &&
				gunzip -c "../$CPPUNIT_FILE" | tar xf - &&
				cd cppunit-$CPPUNIT_VERSION &&
				patch -p1 < "../../$CPPUNIT_P1_FILE" &&
				./configure &&
				gmake -j $jobs &&
				sudo -nA gmake install
			) &&
			echo "$CPPUNIT_VERSION" > built.cppunit ||
			exit 1
		fi

		myfetch $JUDY_URL $JUDY_FILE $JUDY_SHA
		built=`cat built.judy 2>/dev/null`
		if [ "$built" != "$JUDY_VERSION" ]; then
			(
				cd src &&
				gunzip -c "../$JUDY_FILE" | tar xf - &&
				cd judy-$JUDY_VERSION &&
				./configure &&
				gmake && # don't use jobs
				sudo -nA gmake install
			) &&
			echo "$JUDY_VERSION" > built.judy ||
			exit 1
		fi

		myfetch $CCACHE_URL $CCACHE_FILE $CCACHE_SHA
		built=`cat built.ccache 2>/dev/null`
		if [ "$built" != "$CCACHE_VERSION" ]; then
			(
				cd src &&
				gunzip -c "../$CCACHE_FILE" | tar xf - &&
				cd ccache-$CCACHE_VERSION &&
				./configure &&
				gmake -j $jobs &&
				sudo -nA gmake install
			) &&
			echo "$CCACHE_VERSION" > built.ccache ||
			exit 1
		fi
		echo sunos setup ccache
		sudo -nA su - jenkins -c 'export PATH="$PATH:/usr/local/bin"; ccache -M 500M && ccache -c' ||
		exit 1
		;;

	freebsd9)
		myfetch $BOTAN_URL $BOTAN_FILE $BOTAN_SHA
		built=`cat built.botan 2>/dev/null`
		if [ "$built" != "$BOTAN_VERSION" ]; then
			(
				cd src &&
				gunzip -c "../$BOTAN_FILE" | tar xf - &&
				cd Botan-$BOTAN_VERSION &&
				./configure.py &&
				make &&
				sudo -nA make install
			) &&
			echo "$BOTAN_VERSION" > built.botan ||
			exit 1
		fi

		myfetch $SQLITE3_URL $SQLITE3_FILE $SQLITE3_SHA
		built=`cat built.sqlite 2>/dev/null`
		if [ "$built" != "$SQLITE3_VERSION" ]; then
			(
				cd src &&
				gunzip -c "../$SQLITE3_FILE" | tar xf - &&
				cd sqlite-autoconf-3080300 &&
				CFLAGS="-DSQLITE_ENABLE_FTS3=1 -DSQLITE_ENABLE_FTS3_PARENTHESIS=1 -DSQLITE_ENABLE_FTS4=1 -DSQLITE_USE_URI=1 -DSQLITE_ENABLE_COLUMN_METADATA=1 -DSQLITE_SECURE_DELETE=1 -DSQLITE_ENABLE_UNLOCK_NOTIFY=1" ./configure &&
				gmake &&
				sudo -nA gmake install
			) &&
			echo "$SQLITE3_VERSION" > built.sqlite ||
			exit 1
		fi

		myfetch $SUBVERSION_URL $SUBVERSION_FILE $SUBVERSION_SHA
		built=`cat built.subversion 2>/dev/null`
		if [ "$built" != "$SUBVERSION_VERSION" ]; then
			(
				cd src &&
				gunzip -c "../$SUBVERSION_FILE" | tar xf - &&
				cd subversion-$SUBVERSION_VERSION &&
				./configure --with-sqlite=/usr/local &&
				gmake &&
				sudo -nA gmake install
			) &&
			echo "$SUBVERSION_VERSION" > built.subversion ||
			exit 1
		fi
		;;
esac

#
# validns
#

case "$DISTRIBUTION" in
	sunos)
		platform=`uname -p`
		
		jobs=1
		case "$platform" in
			sparc)
				jobs=16
				;;
		esac

		myfetch $VALIDNS_URL $VALIDNS_FILE $VALIDNS_SHA
		built=`cat built.validns 2>/dev/null`
		if [ "$built" != "$VALIDNS_VERSION" ]; then
			(
				cd src &&
				gunzip -c "../$VALIDNS_FILE" | tar xf - &&
				cd validns-$VALIDNS_VERSION &&
				gmake -j $jobs CC=gcc \
					EXTRALPATH="-L/usr/local/ssl/lib -Wl,-R,/usr/local/ssl/lib" \
					EXTRALIBS="-lnsl -lrt" &&
				sudo -nA ginstall -m 755 validns /usr/local/bin/validns
			) &&
			echo "$VALIDNS_VERSION" > built.validns ||
			exit 1
		fi
		;;

	freebsd*)
		myfetch $VALIDNS_URL $VALIDNS_FILE $VALIDNS_SHA
		built=`cat built.validns 2>/dev/null`
		if [ "$built" != "$VALIDNS_VERSION" ]; then
			(
				cd src &&
				gunzip -c "../$VALIDNS_FILE" | tar xf - &&
				cd validns-$VALIDNS_VERSION &&
				make CFLAGS="-pthread" &&
				sudo -nA install -m 755 validns /usr/local/bin/validns
			) &&
			echo "$VALIDNS_VERSION" > built.validns ||
			exit 1
		fi
		;;

	*)
		myfetch $VALIDNS_URL $VALIDNS_FILE $VALIDNS_SHA
		built=`cat built.validns 2>/dev/null`
		if [ "$built" != "$VALIDNS_VERSION" ]; then
			(
				cd src &&
				gunzip -c "../$VALIDNS_FILE" | tar xf - &&
				cd validns-$VALIDNS_VERSION &&
				make &&
				sudo -nA install -m 755 validns /usr/local/bin/validns
			) &&
			echo "$VALIDNS_VERSION" > built.validns ||
			exit 1
		fi
		;;
esac

#
# ldns
#

case "$DISTRIBUTION" in
	sunos)
		platform=`uname -p`
		
		jobs=1
		case "$platform" in
			sparc)
				jobs=16
				;;
		esac

		myfetch $LDNS_URL $LDNS_FILE $LDNS_SHA
		built=`cat built.ldns 2>/dev/null`
		if [ "$built" != "$LDNS_VERSION" ]; then
			(
				cd src &&
				gunzip -c "../$LDNS_FILE" | tar xf - &&
				cd ldns-$LDNS_VERSION &&
				CFLAGS="-m64" LDFLAGS="-m64" ./configure --with-drill \
					--with-examples \
					--enable-stderr-msgs \
					--disable-gost \
					--disable-ecdsa &&
				gmake -j $jobs &&
				sudo -nA gmake install
			) &&
			echo "$LDNS_VERSION" > built.ldns ||
			exit 1
		fi
		;;

	*)
		myfetch $LDNS_URL $LDNS_FILE $LDNS_SHA
		built=`cat built.ldns 2>/dev/null`
		if [ "$built" != "$LDNS_VERSION" ]; then
			(
				cd src &&
				gunzip -c "../$LDNS_FILE" | tar xf - &&
				cd ldns-$LDNS_VERSION &&
				./configure --with-drill \
					--with-examples \
					--enable-stderr-msgs \
					--disable-gost \
					--disable-ecdsa &&
				make &&
				sudo -nA make install
			) &&
			echo "$LDNS_VERSION" > built.ldns ||
			exit 1
		fi
		;;
esac

#
# refresh ld's
#

case "$DISTRIBUTION" in
	sunos)
		sudo -nA crle -u -l /usr/local/lib ||
		exit 1
		;;

	ubuntu|redhat|centos|suse)
		export PATH="$PATH:/sbin:/usr/sbin"
		sudo -nA ldconfig ||
		exit 1
		;;

	freebsd*)
		sudo -nA /etc/rc.d/ldconfig start ||
		exit 1
		;;
esac

echo "DONE"
exit 0
