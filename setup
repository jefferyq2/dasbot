#!/bin/bash -x

freebsd_rc_conf_enable_yes() {
	local what="$1"
	
	if [ -z "$what" ]; then
		echo "usage: freebsd_rc_conf_enable <what>"
		exit 1
	fi
	
	if ! grep -q '^'"$what"'_enable="YES"' /etc/rc.conf; then
		if grep -q '^'"$what"'_enable=' /etc/rc.conf; then
			sudo -nA sed -i '' -e 's%^'"$what"'_enable=.*%'"$what"'_enable="YES"%' /etc/rc.conf ||
			exit 1
		else
			echo "$what"'_enable="YES"' | sudo -nA tee -a /etc/rc.conf >/dev/null ||
			exit 1
		fi
		REBOOT=1
	fi
}

DISTRIBUTION=`cat dist 2>/dev/null`

if [ -z "$DISTRIBUTION" ]; then
	echo "No distribution?"
	exit 1
fi

REBOOT=0
NTP_CONF=/etc/ntp.conf
SSHD_CONF=/etc/ssh/sshd_config
			
case "$DISTRIBUTION" in
	ubuntu)
		export LC_ALL="en_US.UTF-8"
		export LANGUAGE="en_US.UTF-8"
		rm -f apt.log
		sudo -nA apt-get -y update &&
		sudo -nA apt-get -y dist-upgrade >>apt.log &&
		sudo -nA apt-get -y install build-essential \
			open-vm-tools \
			default-jre \
			libxml2-dev \
			libsqlite3-dev \
			sqlite3 \
			libbotan1.8-dev \
			libssl-dev \
			autoconf \
			automake \
			libtool \
			ccache \
			libcunit1-dev \
			doxygen \
			graphviz \
			gdb \
			valgrind \
			ntp \
			protobuf-compiler \
			libprotobuf-dev \
			libcppunit-dev \
			mysql-server \
			libmysqlclient-dev \
			git-svn \
			subversion >>apt.log ||
		exit 1
		cat apt.log
		packages=`grep '[0-9]* upgraded, [0-9]* newly installed, [0-9]* to remove and [0-9]* not upgraded.' apt.log | awk '{ a=a+$1+$3 } END { print a }'`
		if [ -n "$packages" -a "$packages" != "0" ]; then
			REBOOT=1
		fi
		;;
		
	redhat|centos)
		rpm -q epel-release >/dev/null 2>/dev/null ||
		sudo -nA yum -y install http://mirrors.se.eu.kernel.org/fedora-epel/6/x86_64/epel-release-6-8.noarch.rpm ||
		exit 1

		rm -f yum.log
		sudo -nA yum -y remove fprintd &&
		sudo -nA yum -y update >>yum.log &&
		sudo -nA yum -y groupinstall "Development Tools" >>yum.log &&
		sudo -nA yum -y install open-vm-tools \
			libxml2-devel \
			sqlite-devel \
			openssl-devel \
			botan-devel \
			ccache \
			CUnit-devel \
			graphviz \
			protobuf-devel \
			mysql-server \
			mysql-devel \
			ntp \
			wget >>yum.log &&
		sudo -nA chkconfig ntpd on &&
		sudo -nA chkconfig mysqld on ||
		exit 1
		cat yum.log
		packages=`grep '^\(Install\|Upgrade\) *[0-9]* Package' yum.log | awk '{ a=a+$2 } END { print a }'`
		if [ -n "$packages" -a "$packages" != "0" ]; then
			REBOOT=1
		fi
		;;
		
	suse)
		echo "SUSE is broken"
		exit 1
		
		rm -f zypper.log
		sudo zypper ar -f -n opensuse http://download.opensuse.org/distribution/11.4/repo/oss/suse/ opensuse &&
		sudo zypper ar -f -n packman http://packman.inode.at/suse/11.4 packman &&
		sudo zypper -n --gpg-auto-import-keys ref &&
		sudo zypper -n update -l -r SLES11-SP3-Pool -r SLES11-SP3-Updates >>zypper.log &&
		sudo zypper -n install -l -r SLES11-SP3-Pool -r SLES11-SP3-Updates -t pattern Basis-Devel >>zypper.log &&
		
		sudo zypper -n install -l java-1_6_0-ibm \
			cunit-devel \
			doxygen \
			graphviz \
			libcppunit-devel \
			valgrind \
			protobuf-devel \
			libxml2-devel \
			sqlite3-devel \
			ccache >>zypper.log ||
		exit 1
		cat zypper.log
		#224 packages to upgrade, 86 new, 52 to remove, 14 to change arch.
		#44 new packages to install.
		;;

	freebsd9)
		if [ ! -f /var/cron/tabs/root ]; then
			echo '0 3 * * * /usr/sbin/freebsd-update cron' | sudo -nA tee -a /var/cron/tabs/root >/dev/null &&
			sudo -nA chmod 600 /var/cron/tabs/root ||
			exit 1
		else
			if ! grep -q '^0 3 * * * /usr/sbin/freebsd-update cron' /var/cron/tabs/root; then
				echo '0 3 * * * /usr/sbin/freebsd-update cron' | sudo -nA tee -a /var/cron/tabs/root >/dev/null &&
				sudo -nA chmod 600 /var/cron/tabs/root ||
				exit 1
			fi
		fi

		rm -f update.log
		if sudo -nA freebsd-update install >update.log; then
			REBOOT=1
		else
			if ! grep -q '^No updates are available to install.$' update.log; then
				cat update.log
				exit 1
			fi
		fi
		cat update.log
		
		rm -f upgrade.log
		export BRANCH="9-stable"
		sudo -nA pkg_add -Fr bsdadminscripts &&
		sudo -nA -E pkg_upgrade -avX >upgrade.log ||
		exit 1
		cat upgrade.log
		if grep -q '^Install [0-9]* package' upgrade.log; then
			REBOOT=1
		fi

		for pkg in open-vm-tools-nox11 \
			"openjdk6:openjdk6-[a-z0-9]*" \
			libxml2 \
			sqlite3 \
			openssl \
			botan \
			ccache \
			wget \
			sha \
			coreutils \
			cunit \
			doxygen \
			ntp \
			gdb \
			valgrind \
			protobuf \
			cppunit \
			mysql55-server:mysql-server- \
			mysql55-client:mysql-client- \
			git \
			subversion;
		do
			chk="$pkg-"
			if echo "$pkg" | grep -q ':'; then
				chk=`echo "$pkg" | sed 's%:% %' | awk '{ print $2 }'`
				pkg=`echo "$pkg" | sed 's%:% %' | awk '{ print $1 }'`
			fi
			echo "Checking pkg $pkg (match $chk)"
			pkgs=`pkg_info | grep "^$chk[0-9]" | wc -l | awk '{ print $1 }'`
			if [ "$pkgs" = "1" ]; then
				echo "Skip $pkg, installed"
				continue
			fi
			
			rm -f install.log
			if ! sudo -nA pkg_add -Fr "$pkg" 2>install.log; then
				cat install.log
				exit 1
			fi
			cat install.log
			if ! grep -q '^pkg_add: package .* or its older version already installed' install.log; then
				REBOOT=1
			fi
		done
		
		freebsd_rc_conf_enable_yes mysql
		freebsd_rc_conf_enable_yes ntpd
		freebsd_rc_conf_enable_yes vmware_guest_vmblock
		freebsd_rc_conf_enable_yes vmware_guest_vmhgfs
		freebsd_rc_conf_enable_yes vmware_guest_vmmemctl
		freebsd_rc_conf_enable_yes vmware_guest_vmxnet
		freebsd_rc_conf_enable_yes vmware_guestd

		if ! grep -q '^fdesc /dev/fd fdescfs rw 0 0$' /etc/fstab; then
			echo 'fdesc /dev/fd fdescfs rw 0 0' | sudo -nA tee -a /etc/fstab >/dev/null ||
			exit 1
		fi
		if ! grep -q '^proc /proc procfs rw 0 0$' /etc/fstab; then
			echo 'proc /proc procfs rw 0 0' | sudo -nA tee -a /etc/fstab >/dev/null ||
			exit 1
		fi
		;;

	freebsd10)
		if [ ! -f /var/cron/tabs/root ]; then
			echo '0 3 * * * /usr/sbin/freebsd-update cron' | sudo -nA tee -a /var/cron/tabs/root >/dev/null &&
			sudo -nA chmod 600 /var/cron/tabs/root ||
			exit 1
		else
			if ! grep -q '^0 3 * * * /usr/sbin/freebsd-update cron' /var/cron/tabs/root; then
				echo '0 3 * * * /usr/sbin/freebsd-update cron' | sudo -nA tee -a /var/cron/tabs/root >/dev/null &&
				sudo -nA chmod 600 /var/cron/tabs/root ||
				exit 1
			fi
		fi

		rm -f update.log
		if sudo -nA freebsd-update install >update.log; then
			REBOOT=1
		else
			if ! grep -q '^No updates are available to install.$' update.log; then
				cat update.log
				exit 1
			fi
		fi
		cat update.log
		
		rm -f upgrade.log
		sudo pkg update &&
		sudo pkg upgrade >upgrade.log ||
		exit 1
		cat upgrade.log
		if ! grep -q '^Nothing to do$' upgrade.log; then
			REBOOT=1
		fi

		for pkg in open-vm-tools-nox11 \
			"openjdk6:openjdk6-[a-z0-9]*" \
			libxml2 \
			sqlite3 \
			openssl \
			botan \
			ccache \
			wget \
			coreutils \
			cunit \
			doxygen \
			ntp \
			gdb \
			valgrind \
			protobuf \
			cppunit \
			mysql55-server \
			mysql55-client \
			git \
			subversion;
		do
			chk="$pkg-"
			if echo "$pkg" | grep -q ':'; then
				chk=`echo "$pkg" | sed 's%:% %' | awk '{ print $2 }'`
				pkg=`echo "$pkg" | sed 's%:% %' | awk '{ print $1 }'`
			fi
			echo "Checking pkg $pkg (match $chk)"
			pkgs=`pkg info | grep "^$chk[0-9]" | wc -l | awk '{ print $1 }'`
			if [ "$pkgs" = "1" ]; then
				echo "Skip $pkg, installed"
				continue
			fi
			
			rm -f install.log
			if ! sudo -nA pkg install -y "$pkg" 2>install.log; then
				cat install.log
				exit 1
			fi
			cat install.log
			if ! grep -q "^$pkg.* already installed$" install.log; then
				REBOOT=1
			fi
		done
		
		freebsd_rc_conf_enable_yes mysql
		freebsd_rc_conf_enable_yes ntpd
		freebsd_rc_conf_enable_yes vmware_guest_vmblock
		freebsd_rc_conf_enable_yes vmware_guest_vmhgfs
		freebsd_rc_conf_enable_yes vmware_guest_vmmemctl
		freebsd_rc_conf_enable_yes vmware_guest_vmxnet
		freebsd_rc_conf_enable_yes vmware_guestd

		if ! grep -q '^fdesc /dev/fd fdescfs rw 0 0$' /etc/fstab; then
			echo 'fdesc /dev/fd fdescfs rw 0 0' | sudo -nA tee -a /etc/fstab >/dev/null ||
			exit 1
		fi
		if ! grep -q '^proc /proc procfs rw 0 0$' /etc/fstab; then
			echo 'proc /proc procfs rw 0 0' | sudo -nA tee -a /etc/fstab >/dev/null ||
			exit 1
		fi
		;;
	
	sunos)
		sudo -nA pkg refresh ||
		exit 1
		
		rm -f update.log
		sudo -nA pkg update >update.log
		status="$?"
		cat update.log
		
		if [ "$status" = "0" ]; then
			REBOOT=1
		else
			if ! grep -q '^No updates available for this image.$' update.log; then
				exit 1
			fi
		fi
		
		rm -f install.log
		sudo -nA pkg install gcc-3 \
			gnu-make \
			libtool \
			autoconf \
			automake-110 \
			libxml2 \
			stdcxx \
			developer/base-developer-utilities \
			group/feature/developer-gnu \
			ucb \
			c++-runtime \
			doxygen \
			graphviz \
			mysql-51 \
			mysql-51/library >install.log
		status="$?"
		cat install.log
		
		if [ "$status" = "0" ]; then
			REBOOT=1
		else
			if ! grep -q '^No updates necessary for this image.$' install.log; then
				exit 1
			fi
		fi
		
		NTP_CONF=/etc/inet/ntp.conf
		if [ ! -f $NTP_CONF ]; then
			sudo -nA cp /etc/inet/ntp.client $NTP_CONF ||
			exit 1
		fi
		if ! svcs ntp | grep -q '^online'; then
			sudo -nA svcadm enable ntp ||
			exit 1
		fi
		;;

	*)
		echo "Unknown dist"
		exit 1
esac

#
# MySQL
#

case "$DISTRIBUTION" in
	redhat|centos)
		if ! sudo -nA service mysqld status >/dev/null 2>/dev/null; then
			sudo -nA service mysqld start ||
			exit 1
		fi
		;;

	freebsd*)
		if ! sudo -nA /usr/local/etc/rc.d/mysql-server status >/dev/null 2>/dev/null; then
			sudo -nA /usr/local/etc/rc.d/mysql-server start ||
			exit 1
		fi
		;;

	sunos)
		if ! svcs mysql | grep -q '^online'; then
			sudo -nA svcadm enable mysql ||
			exit 1
			I=0
			while true; do
				mysql -u root -e 'SELECT 0' 2>/dev/null >/dev/null &&
				break
				if [ $I -gt 30 ]; then
					echo "unable to start mysql"
					exit 1
				fi
				I=$(( I + 1 ))
				sleep 2
			done
		fi
		;;
esac

mysql -u root -e 'DROP DATABASE test'
mysql -u root -e 'DELETE FROM mysql.db WHERE Db="test" OR Db="test\\_%"'
mysql -u root -e 'DELETE FROM mysql.user WHERE User=""' &&
mysql -u root -e 'DELETE FROM mysql.user WHERE User="root" AND Host NOT IN ("localhost", "127.0.0.1", "::1")' &&
mysql -u root -e 'FLUSH PRIVILEGES' ||
exit 1
if ! mysql -u root -B -e 'show databases' | grep -q '^test$'; then
	mysqladmin -u root create test &&
	mysql -u root -e 'grant all on test.* to test@localhost identified by "test"' ||
	exit 1
fi
if ! mysql -u root -B -e 'show databases' | grep -q '^build$'; then
	mysqladmin -u root create build &&
	mysql -u root -e 'grant all on test.* to build@localhost identified by "build"' ||
	exit 1
fi

#
# ntpd
#

if ! grep -q '^tinker panic 0$' $NTP_CONF; then
	echo "tinker panic 0" | sudo -nA tee -a $NTP_CONF >/dev/null
	REBOOT=1
fi
if ! grep -q '^restrict 127.0.0.1$' $NTP_CONF; then
	echo "restrict 127.0.0.1" | sudo -nA tee -a $NTP_CONF >/dev/null
	REBOOT=1
fi
if ! grep -q '^restrict default kod nomodify notrap$' $NTP_CONF; then
	echo "restrict default kod nomodify notrap" | sudo -nA tee -a $NTP_CONF >/dev/null
	REBOOT=1
fi
case "$DISTRIBUTION" in
	sunos)
		if ! grep -q '^server 0.nl.pool.ntp.org$' $NTP_CONF; then
			echo "server 0.nl.pool.ntp.org" | sudo -nA tee -a $NTP_CONF >/dev/null
			REBOOT=1
		fi
		if ! grep -q '^server 1.nl.pool.ntp.org$' $NTP_CONF; then
			echo "server 1.nl.pool.ntp.org" | sudo -nA tee -a $NTP_CONF >/dev/null
			REBOOT=1
		fi
		if ! grep -q '^server 2.nl.pool.ntp.org$' $NTP_CONF; then
			echo "server 2.nl.pool.ntp.org" | sudo -nA tee -a $NTP_CONF >/dev/null
			REBOOT=1
		fi
		if ! grep -q '^server 3.nl.pool.ntp.org$' $NTP_CONF; then
			echo "server 3.nl.pool.ntp.org" | sudo -nA tee -a $NTP_CONF >/dev/null
			REBOOT=1
		fi
		;;
esac

#
# jenkins user
#

if ! grep -q '^jenkins:' /etc/passwd; then
	case "$DISTRIBUTION" in
		ubuntu|redhat|centos|suse|sunos)
			sudo -nA useradd -m jenkins ||
			exit 1
			;;

		freebsd*)
			echo 'jenkins::::::::/bin/sh:' | sudo -nA adduser -w no -f - ||
			exit 1
			;;

		*)
			exit 1
			;;
	esac
fi

case "$DISTRIBUTION" in
	ubuntu|redhat|centos|suse)
		sudo -nA su - -c 'mkdir -p .ssh && chmod 700 .ssh && echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDTmMYjX/ZUbjWH4nQjKQlCjr8VIOd2uIQyOaAudwZNLnF2sIiioq9CIf9fB4Pa3JX7B6+XRbWQO9BD8Z/WR/fwupkTO9uSB6KtpSvM+PGxhdLgyqMAH4WdySBOxvFLYizUFKs3l+i1IGBz2qQIBeiYFvHxgocFmTlOUdY1uoqM9oatRo82EDm+vHaHs//kJgfGctN+MKcdKJsvA5iRySjtg6ncC5ywv2kSKq+LtTkm4uXV6CeKi7BXYSfNer8jjcAqTSNVf8Ob2OiqmbLhijW2YdDqJXAV2ZBPSZ0c7IwqovyiVBJ+GkAmavsd8I6KTKW79T4ThU+O2XSktCVDpd8t jenkins@freebsd-vm1.sinodun.com" > .ssh/authorized_keys && chmod 640 .ssh/authorized_keys' jenkins ||
		exit 1
		;;

	sunos)
		sudo -nA su - jenkins -c 'mkdir -p .ssh && chmod 700 .ssh && echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDTmMYjX/ZUbjWH4nQjKQlCjr8VIOd2uIQyOaAudwZNLnF2sIiioq9CIf9fB4Pa3JX7B6+XRbWQO9BD8Z/WR/fwupkTO9uSB6KtpSvM+PGxhdLgyqMAH4WdySBOxvFLYizUFKs3l+i1IGBz2qQIBeiYFvHxgocFmTlOUdY1uoqM9oatRo82EDm+vHaHs//kJgfGctN+MKcdKJsvA5iRySjtg6ncC5ywv2kSKq+LtTkm4uXV6CeKi7BXYSfNer8jjcAqTSNVf8Ob2OiqmbLhijW2YdDqJXAV2ZBPSZ0c7IwqovyiVBJ+GkAmavsd8I6KTKW79T4ThU+O2XSktCVDpd8t jenkins@freebsd-vm1.sinodun.com" > .ssh/authorized_keys && chmod 640 .ssh/authorized_keys' ||
		exit 1
		;;

	freebsd*)
		(
			cd ~jenkins &&
			sudo -nA mkdir -p .ssh &&
			sudo -nA chown jenkins:jenkins .ssh &&
			sudo -nA chmod 700 .ssh &&
			echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDTmMYjX/ZUbjWH4nQjKQlCjr8VIOd2uIQyOaAudwZNLnF2sIiioq9CIf9fB4Pa3JX7B6+XRbWQO9BD8Z/WR/fwupkTO9uSB6KtpSvM+PGxhdLgyqMAH4WdySBOxvFLYizUFKs3l+i1IGBz2qQIBeiYFvHxgocFmTlOUdY1uoqM9oatRo82EDm+vHaHs//kJgfGctN+MKcdKJsvA5iRySjtg6ncC5ywv2kSKq+LtTkm4uXV6CeKi7BXYSfNer8jjcAqTSNVf8Ob2OiqmbLhijW2YdDqJXAV2ZBPSZ0c7IwqovyiVBJ+GkAmavsd8I6KTKW79T4ThU+O2XSktCVDpd8t jenkins@freebsd-vm1.sinodun.com" | sudo -nA tee .ssh/authorized_keys >/dev/null &&
			sudo -nA chmod 640 .ssh/authorized_keys
		) ||
		exit 1
		;;

	*)
		exit 1
		;;
esac

case "$DISTRIBUTION" in
	sunos)
		sudo -nA su - jenkins -c 'rm -f .bashrc && echo "export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/mysql/bin" > .bashrc' ||
		exit 1
		;;
esac

#
# readonly user
#

if ! grep -q '^readonly:' /etc/passwd; then
	case "$DISTRIBUTION" in
		ubuntu|redhat|centos|suse|sunos)
			sudo -nA useradd -m readonly ||
			exit 1
			;;

		freebsd*)
			echo 'readonly::::::::/bin/sh:' | sudo -nA adduser -w no -f - ||
			exit 1
			;;

		*)
			exit 1
			;;
	esac
fi

# TODO: install user keys

case "$DISTRIBUTION" in
	sunos)
		sudo -nA su - readonly -c 'rm -f .bashrc && echo "export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:/usr/mysql/bin" > .bashrc' ||
		exit 1
		;;
esac

#
# syslog
#
case "$DISTRIBUTION" in
	ubuntu)
		if ! grep -B 1 -A 1 '^\*\.\*;auth,authpriv\.none[ 	]*-/var/log/syslog$' /etc/rsyslog.d/50-default.conf | grep -q '^$FileCreateMode'; then
			sudo -nA sed -i 's%^\(\*\.\*;auth,authpriv\.none[ 	]*-/var/log/syslog\)$%$FileCreateMode 0644\n\1\n$FileCreateMode 0640%' /etc/rsyslog.d/50-default.conf &&
			sudo -nA chmod o+r /var/log/syslog ||
			exit 1
			REBOOT=1
		fi
		if [ ! -f /etc/rsyslog.d/00-opendnssec.conf ]; then
			echo -e '$IMUXSockRateLimitInterval 0\n$SystemLogRateLimitInterval 0' | sudo -nA tee -a /etc/rsyslog.d/00-opendnssec.conf >/dev/null ||
			exit 1
			REBOOT=1
		fi
		;;

	redhat|centos)
		if ! grep -B 1 -A 1 '^\*\.\(info\|\*\);mail\.none;authpriv\.none;cron\.none[ 	]*/var/log/messages$' /etc/rsyslog.conf | grep -q '^$FileCreateMode'; then
			sudo -nA sed -i 's%^\*\.\(info\|\*\)\(;mail\.none;authpriv\.none;cron\.none[ 	]*/var/log/messages\)$%$FileCreateMode 0644\n*.*\2\n$FileCreateMode 0640%' /etc/rsyslog.conf &&
			sudo -nA chmod a+r /var/log/messages ||
			exit 1
			REBOOT=1
		fi
		if [ ! -f /etc/rsyslog.d/00-opendnssec.conf ]; then
			echo -e '$IMUXSockRateLimitInterval 0\n$SystemLogRateLimitInterval 0' | sudo -nA tee -a /etc/rsyslog.d/00-opendnssec.conf >/dev/null ||
			exit 1
			REBOOT=1
		fi
		;;

	freebsd*)
		if grep -q '^\*\.notice;authpriv\.none;kern\.debug;lpr\.info;mail\.crit;news\.err[ 	]/var/log/messages$' /etc/syslog.conf; then
			sudo -nA sed -i '' -e 's%^\*\.notice;authpriv\.none;kern\.debug;lpr\.info;mail\.crit;news\.err[ 	]/var/log/messages$%daemon.*;local0.*;local1.*;authpriv.none;lpr.info;mail.crit;news.err	/var/log/messages%' /etc/syslog.conf ||
			exit 1
			REBOOT=1
		fi
		;;

	sunos)
		if grep -q '^\*\.err;kern\.debug;daemon\.notice;mail\.crit[	]*/var/adm/messages$' /etc/syslog.conf; then
			sudo -nA gsed -i -e 's%\*\.err;kern\.debug;daemon\.notice;mail\.crit[	]*/var/adm/messages%*.debug			/var/adm/messages%' /etc/syslog.conf ||
			exit 1
			REBOOT=1
		fi
		;;
esac

#
# sshd
#

case "$DISTRIBUTION" in
	freebsd*)
		if sudo -nA grep '^PermitRootLogin' $SSHD_CONF | grep -q 'yes'; then
			sudo -nA sed -i '' -e 's%^\(PermitRootLogin\)%#\1%g' $SSHD_CONF ||
			exit 1
			REBOOT=1
		fi
		;;

	sunos)
		if sudo -nA grep '^PermitRootLogin' $SSHD_CONF | grep -q 'yes'; then
			sudo -nA gsed -i -e 's%^\(PermitRootLogin\)%#\1%g' $SSHD_CONF ||
			exit 1
			REBOOT=1
		fi
		;;

	*)
		if sudo -nA grep '^PermitRootLogin' $SSHD_CONF | grep -q 'yes'; then
			sudo -nA sed -i 's%^\(PermitRootLogin\)%#\1%g' $SSHD_CONF ||
			exit 1
			REBOOT=1
		fi
		;;
esac
if ! sudo -nA grep -q '^PermitRootLogin no' $SSHD_CONF; then
	sudo -nA echo "PermitRootLogin no" | sudo -nA tee -a $SSHD_CONF >/dev/null ||
	exit 1
	REBOOT=1
fi
case "$DISTRIBUTION" in
	freebsd*)
		if sudo -nA grep '^PasswordAuthentication' $SSHD_CONF | grep -q 'yes'; then
			sudo -nA sed -i '' - e 's%^\(PasswordAuthentication\)%#\1%g' $SSHD_CONF ||
			exit 1
			REBOOT=1
		fi
		;;

	sunos)
		if sudo -nA grep '^PasswordAuthentication' $SSHD_CONF | grep -q 'yes'; then
			sudo -nA gsed -i -e 's%^\(PasswordAuthentication\)%#\1%g' $SSHD_CONF ||
			exit 1
			REBOOT=1
		fi
		;;

	*)
		if sudo -nA grep '^PasswordAuthentication' $SSHD_CONF | grep -q 'yes'; then
			sudo -nA sed -i 's%^\(PasswordAuthentication\)%#\1%g' $SSHD_CONF ||
			exit 1
			REBOOT=1
		fi
		;;
esac
if ! sudo -nA grep -q '^PasswordAuthentication no' $SSHD_CONF; then
	echo "PasswordAuthentication no" | sudo -nA tee -a $SSHD_CONF >/dev/null ||
	exit 1
	REBOOT=1
fi

#
# firewall
#

case "$DISTRIBUTION" in
	ubuntu)
		sudo -nA ufw allow from any to any port 22 &&
		echo y | sudo -nA ufw enable ||
		exit 1
		;;

	freebsd*)
		sha=""
		if [ -f /etc/ipf.rules ]; then
			sha=`sha1 -q /etc/ipf.rules`
			if [ -z "$sha" ]; then
				exit 1
			fi
		fi
		if [ "$sha" != "c2f7f78f3ee6ebd7bd5a04e7888922d63156d1fd" ]; then
			sudo -nA rm -f /etc/ipf.rules &&
			echo -e "block in all\npass in from any to port = 22 keep state\npass in on lo keep state\npass out all keep state" | sudo -nA tee /etc/ipf.rules >/dev/null ||
			exit 1
			sha=`sha1 -q /etc/ipf.rules`
			if [ -z "$sha" ]; then
				exit 1
			fi
			if [ "$sha" != "c2f7f78f3ee6ebd7bd5a04e7888922d63156d1fd" ]; then
				echo "ipf.rules sha missmatch"
				exit 1
			fi
			REBOOT=1
		fi
		
		freebsd_rc_conf_enable_yes ipfilter
		if ! grep -q '^ipfilter_rules="/etc/ipf.rules"' /etc/rc.conf; then
			echo 'ipfilter_rules="/etc/ipf.rules"' | sudo -nA tee -a /etc/rc.conf >/dev/null ||
			exit 1
			REBOOT=1
		fi
		;;

	sunos)
		sha=""
		if [ -f /etc/ipf/ipf.conf ]; then
			sha=`sha1sum /etc/ipf/ipf.conf | awk '{print $1}'`
			if [ -z "$sha" ]; then
				exit 1
			fi
		fi
		if [ "$sha" != "c2f7f78f3ee6ebd7bd5a04e7888922d63156d1fd" ]; then
			sudo -nA rm -f /etc/ipf/ipf.conf &&
			echo -e "block in all\npass in from any to port = 22 keep state\npass in on lo keep state\npass out all keep state" | sudo -nA tee /etc/ipf/ipf.conf >/dev/null ||
			exit 1
			sha=`sha1sum /etc/ipf/ipf.conf | awk '{print $1}'`
			if [ -z "$sha" ]; then
				exit 1
			fi
			if [ "$sha" != "c2f7f78f3ee6ebd7bd5a04e7888922d63156d1fd" ]; then
				echo "ipf.conf sha missmatch"
				exit 1
			fi
			REBOOT=1
		fi
		;;
esac


#
# Reboot if needed
#

if [ "$REBOOT" = "1" ]; then
	case "$DISTRIBUTION" in
		ubuntu|redhat|centos|suse|freebsd*)
			nohup sudo -nA shutdown -r +1 >/dev/null 2>/dev/null </dev/null &
			;;

		sunos)
			nohup sudo -nA shutdown -y -r -g 60 "reboot" >/dev/null 2>/dev/null </dev/null &
			;;
	esac
	echo "DONE REBOOT"
	exit 0
fi

echo "DONE"
exit 0
